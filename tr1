%pip install numpy scipy scikit-learn matplotlib

import numpy as np
from scipy.io import loadmat
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import pandas as pd

# 1. Завантаження та огляд даних

data = loadmat('../data/digits.mat')    # Шлях до вашого файлу
# В залежності від формату вашого mat-файлу можуть бути імена X, y, data, labels, etc.
print('Ключі файлу:', data.keys())

# Припустимо, що дані мають ключі 'X' і 'y'; змініть за потреби:
X = data['X']
y = data['y'].ravel() if data['y'].ndim>1 else data['y']

print(X.shape, y.shape)
print('Класи:', np.unique(y))

# 2. Розділення на навчальну і тестову частини

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, stratify=y, random_state=42
)
print('Train:', X_train.shape, 'Test:', X_test.shape)

# 3. Масштабування ознак (нормалізація)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 4. Побудова і навчання моделей

results = []

# Одношарова MLP (100 нейронів)
mlp1 = MLPClassifier(hidden_layer_sizes=(100,),
                     solver='adam', activation='tanh', max_iter=100, random_state=1)
mlp1.fit(X_train, y_train)
results.append({
    'Модель': 'MLP (100)',
    'Точність train': accuracy_score(y_train, mlp1.predict(X_train)),
    'Точність test':  accuracy_score(y_test, mlp1.predict(X_test))
})

# Двошарова MLP [3,3] з tanh та relu
for act in ['tanh', 'relu']:
    mlp2 = MLPClassifier(hidden_layer_sizes=(3,3),
                         solver='adam', activation=act, max_iter=100, random_state=1)
    mlp2.fit(X_train, y_train)
    results.append({
        'Модель': f"MLP (3,3) {act}",
        'Точність train': accuracy_score(y_train, mlp2.predict(X_train)),
        'Точність test': accuracy_score(y_test, mlp2.predict(X_test))
    })

# Тришарова MLP [20,7,10] з tanh та relu
for act in ['tanh', 'relu']:
    mlp3 = MLPClassifier(hidden_layer_sizes=(20,7,10),
                         solver='adam', activation=act, max_iter=100, random_state=1)
    mlp3.fit(X_train, y_train)
    results.append({
        'Модель': f"MLP (20,7,10) {act}",
        'Точність train': accuracy_score(y_train, mlp3.predict(X_train)),
        'Точність test': accuracy_score(y_test, mlp3.predict(X_test))
    })

# SVM (RBF)
svc = SVC(kernel='rbf', gamma='scale', random_state=1)
svc.fit(X_train, y_train)
results.append({
    'Модель': 'SVM (RBF)',
    'Точність train': accuracy_score(y_train, svc.predict(X_train)),
    'Точність test': accuracy_score(y_test, svc.predict(X_test))
})

# 5. Вивід результатів

df = pd.DataFrame(results)
df.style.format({'Точність train': '{:.4f}', 'Точність test': '{:.4f}'})

# 6. Візуалізація порівняння

plt.figure(figsize=(10,5))
x = np.arange(len(results))
plt.bar(x-0.15, [r['Точність train'] for r in results], width=0.3, label='Train')
plt.bar(x+0.15, [r['Точність test'] for r in results], width=0.3, label='Test')
plt.xticks(x, [r['Модель'] for r in results], rotation=25)
plt.ylim(0.5, 1.05)
plt.ylabel('Accuracy')
plt.legend()
plt.title('Точність моделей')
plt.grid(True, axis='y', linestyle=':')
plt.show()
